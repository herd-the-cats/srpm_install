---
# tasks file for srpm_install

# Seatbelt. This role should not be run directly as root.
- name: "Check that this role is running as a non-root build user."
  fail:
    msg: "Please use a non-root remote user to run this role. Using rpmbuild as a superuser can have unfortunate results."
  when: lookup('pipe','id -u') == 0 or ansible_user == root
  become: no

- name: "Install prerequisites for rpmbuild."
  dnf:
    name: "{{ srpm_build_deps }}"
    state: "present"
  become: yes

- name: "Create build directory for custom rpm packages."
  file:
    path: "{{ lookup('env','HOME')}}/{{ srpm_build_dir }}"
    state: "directory"
    mode: 0755
  become: no

- name: "Create .rpmmacros file pointing to custom rpm build directory."
  template:
    src: "userhome/.rpmmacros"
    dest: "{{ lookup('env','HOME')}}/.rpmmacros"
    mode: 0644
  become: no

- name: "Download SRPMs."
  get_url:
    url: "{{ item.url }}"
    dest: "/tmp/"
    mode: 0644
  with_items: "{{ srpm_pkgs }}"
  register: srpm_dl
  become: no

- name: "Install SRPMs."
  command: "rpm -ivh /tmp/{{ item.url | basename }}"
  with_items: "{{ srpm_pkgs }}"
  when: srpm_dl is changed
  become: no

- name: "Copy custom SRPM spec files."
  copy:
    src: "srpm_specs/{{ item.spec }}"
    dest: "{{lookup('env', 'HOME')}}/{{ srpm_build_dir }}/SPECS/{{ item.spec }}"
    mode: 0644
  with_items: "{{ srpm_pkgs | selectattr('spec','defined') | list | default([]) }}"
  register: srpm_copy_spec
  become: no

- name: "Install SRPM dependencies."
  dnf:
    name: "{{ item.1 }}"
    state: "present"
  with_subelements:
  - "{{ srpm_pkgs | selectattr('deps','defined') | list | default([]) }}"
  - "deps"
  register: srpm_pkg_deps
  become: yes

- name: "Build custom RPMs."
  command: "rpmbuild -bb {{lookup('env','HOME')}}/{{ srpm_build_dir }}/SPECS/{{ item.spec | default( item.name + '.spec' ) }}"
  with_items: "{{ srpm_pkgs }}"
  register: srpm_rpmbuild
  when: (lookup('pipe','id -u') != 0) and (srpm_dl is changed or srpm_copy_spec is changed or srpm_pkg_deps is changed)
  become: no

- name: "Set variable with srpm names."
  set_fact:
    srpm_names: "{{ srpm_names | default([]) + [ item.name ] }}"
  with_items: "{{ srpm_pkgs }}"
  become: no

# This takes an empty list (srpm_built) and adds a list at a time generated from the whole stdout of .results of the rpmbuild
# command. The regex is overly specific partly because a capture group is needed for both package name and arch thanks to the srpm build 
# environment making an arch directory. x86_64 and noarch seem to be the only ones worth worrying with here.
- name: "Extract built package names."
  set_fact:
    srpm_built: >
      {{ srpm_built | default([]) +
      item.stdout |
      regex_findall('^Wrote[:].*rpm$', multiline=True) |
      map('regex_replace','^Wrote:\s[/\S]+(?P<name>(?:' +
      srpm_names | join('|') +
      ')[-\w]*[-]?(?:\d\.\d+\.\d[-]\d[a-zA-Z]{0,6}){1}[.\w]+(?P<arch>x86_64|noarch)+\.rpm)', '\g<name> \g<arch>') |
      list }}
  with_items: "{{ srpm_rpmbuild.results }}"
  when:
  - (item.skipped is not defined and not item.skipped)
  - srpm_rpmbuild is defined
  - srpm_rpmbuild != ""
  - 'srpm_rpmbuild.msg == "All items completed"'
  become: no

- name: "Install custom RPMS."
  dnf:
    name: >
      {{ srpm_built | reject('search','debug') |
      map('regex_replace', '^([^\s]+)\s([^\s]+)$', lookup('env','HOME') +
      '/' + srpm_build_dir + '/RPMS/\2/\1') | list }}
    state: "present"
    disable_excludes: "all"
  when:
  - srpm_built is defined
  - 'srpm_rpmbuild.msg == "All items completed"'
  become: yes

- name: "Exclude custom packages from dnf."
  lineinfile:
    state: "present"
    insertafter: '\[main\]'
    backup: yes
    path: "/etc/dnf/dnf.conf"
    line: "excludepkgs={{ srpm_names | join(',') }}"
    regexp: "^excludepkgs.+\n"
  when: 'srpm_rpmbuild.msg == "All items completed"'
  become: yes
